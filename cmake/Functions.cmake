include(CheckIncludeFile)
include(CheckSymbolExists)
include(CheckTypeSize)
include(CheckFunctionExists)
include(CheckLibraryExists)
include(CheckCCompilerFlag)
include(CheckCSourceCompiles)

macro(add_cflags ADD)
  if(NOT ARGN)
    set(VAR_NAME CMAKE_C_FLAGS)
  else(NOT ARGN)
    set(VAR_NAME "${ARGN}")
  endif(NOT ARGN)
  set(C_FLAGS ${CMAKE_C_FLAGS} ${${VAR_NAME}})
  string(REGEX REPLACE " +" ";" C_FLAGS "${C_FLAGS}")
  string(REGEX REPLACE "^;+" "" C_FLAGS "${C_FLAGS}")
  list(REMOVE_DUPLICATES C_FLAGS)
  # message("VAR_NAME: ${VAR_NAME}") message("C_FLAGS: ${C_FLAGS}")
  list(FIND C_FLAGS "${ADD}" FOUND_AT)
  # message("FOUND_AT: ${FOUND_AT}") if("${C_FLAGS}" MATCHES "${ADD}")
  if(NOT "${FOUND_AT}" MATCHES "-1")

  else()
    set("${VAR_NAME}" "${${VAR_NAME}} ${ADD}")
  endif()
endmacro(add_cflags)

function(check_cflag FLAG VAR)
  message(CHECK_START "Compiler flag  ${FLAG}")
  set(CMAKE_REQUIRED_QUIET TRUE)
  check_c_compiler_flag("${FLAG}" "${VAR}")
  set(CMAKE_REQUIRED_QUIET FALSE)
  if(NOT ARGN)
    set(VAR_NAME CMAKE_C_FLAGS)
  else(NOT ARGN)
    string(TOUPPER "CMAKE_C_FLAGS_${ARGN}" VAR_NAME)
  endif(NOT ARGN)
  # message("VAR_NAME: ${VAR_NAME}")
  if(${VAR})
    message(CHECK_PASS "supported")
    add_cflags("${FLAG}" "${VAR_NAME}")
  else(${VAR})
    message(CHECK_FAIL "not supported")
  endif(${VAR})
endfunction(
  check_cflag
  FLAG
  VAR)

function(DUMP VAR)
  message("\n\nVariable dump of: " ${ARGV} "\n")
  foreach(VAR ${ARGV})
    message("\t${VAR} = ${${VAR}}")
  endforeach(VAR ${ARGV})
  message("\n")
endfunction(DUMP VAR)

macro(check_inline)
  foreach(KEYWORD "__inline__" "__inline" "inline")
    if(NOT INLINE_KEYWORD)
      set(CMAKE_REQUIRED_DEFINITIONS "-DTESTKEYWORD=${KEYWORD}")
      check_c_source_compiles(
        "typedef int foo_t;
  static TESTKEYWORD foo_t static_foo(){return 0;}
  foo_t foo(){return 0;}
  int main(int argc, char *argv[]){return 0;}"
        HAVE_${KEYWORD})
      if(HAVE_${KEYWORD})
        set(INLINE_KEYWORD "${KEYWORD}")
      endif(HAVE_${KEYWORD})
    endif(NOT INLINE_KEYWORD)
  endforeach(KEYWORD)
  message(STATUS "inline keyword: ${INLINE_KEYWORD}")
endmacro(check_inline)

function(isin)
  set(ARGUMENTS "${ARGV}")
  list(GET ARGUMENTS 0 RETVAR)
  list(GET ARGUMENTS 1 ITEM)
  list(REMOVE_AT ARGUMENTS 0 1)
  # message("ARGUMENTS: ${ARGUMENTS}")
  list(FIND ARGUMENTS "${ITEM}" FOUND)

  if(${FOUND} EQUAL -1)
    set(RET FALSE)
  else()
    set(RET TRUE)
  endif()
  set("${RETVAR}"
      ${RET}
      PARENT_SCOPE)
  # return(${RET})
endfunction(isin)
